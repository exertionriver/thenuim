sourceCompatibility = 16
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "river.exertion.thenuim.DesktopLauncher"
project.ext.assetsDir = new File("../asset/src")

import org.gradle.internal.os.OperatingSystem

dependencies {
    implementation project(path: ':automation')

    testImplementation project(path: ':base', configuration: 'testDependencies')
}

tasks.register('run', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true as JavaExecSpec

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

tasks.register('debug', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true as JavaExecSpec
    debug = true
}

tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

dist.dependsOn classes

tasks.register('theFatJar', Jar) {
    manifest {
        attributes 'Main-Class': 'river.exertion.thenuim.DesktopLauncher'
    }
    archiveBaseName = 'thenuim'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
